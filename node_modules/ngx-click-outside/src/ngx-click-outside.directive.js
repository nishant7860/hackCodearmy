"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var NgXClickOutside = /** @class */ (function () {
    function NgXClickOutside(elementRef) {
        this.elementRef = elementRef;
        this.exclude = ''; // Takes the nodes which should be excluded while checking 
        this.clickOutside = new core_1.EventEmitter();
    }
    NgXClickOutside.prototype.ngOnInit = function () {
        this.nodesExcluded = [];
        this.excludeCheck();
        //let nodes = this.exclude.split(',');
        //for (let node of nodes) {
        //    this.nodesExcluded.push(node)
        //}
    };
    NgXClickOutside.prototype.excludeCheck = function () {
        if (this.exclude) {
            try {
                var nodes = Array.from(document.querySelectorAll(this.exclude));
                if (nodes) {
                    this.nodesExcluded = nodes;
                }
            }
            catch (err) {
                console.error('[ng-click-outside] Check your exclude selector syntax.', err);
            }
        }
    };
    NgXClickOutside.prototype.controlClick = function ($event) {
        var isClickedInside = this.onClick($event);
        if (!isClickedInside) {
            this.clickOutside.emit($event.target);
        }
    };
    NgXClickOutside.prototype.onClick = function ($event) {
        //const isClickedInside = this.elementRef.nativeElement.contains($event.target) || (this.shouldExclude($event.target));
        var current = $event.target;
        //// Reach under the hood to get the actual DOM element that is
        //// being used to render the component.
        var host = this.elementRef.nativeElement;
        //// Here, we are going to walk up the DOM tree, checking to see
        //// if we hit the "host" node. If we hit the host node at any
        //// point, we know that the target must reside within the local
        //// tree of the host.
        do {
            // If we hit the host node, we know that the target resides
            // within the host component.
            if (current === host || this.elementRef.nativeElement.contains(current) || (this.shouldExclude(current))) {
                return (true);
            }
            current = current.parentNode;
        } while (current);
        // //If we made it this far, we never encountered the host
        // //component as we walked up the DOM tree. As such, we know that
        // //the target resided outside of the host component.
        return (false);
        //if (!isClickedInside) {
        //    this.clickOutside.emit($event.target);
        //}
    };
    NgXClickOutside.prototype.shouldExclude = function (target) {
        for (var _i = 0, _a = this.nodesExcluded; _i < _a.length; _i++) {
            var excludedNode = _a[_i];
            if (excludedNode.contains(target)) {
                return true;
            }
        }
        return false;
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], NgXClickOutside.prototype, "exclude", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], NgXClickOutside.prototype, "clickOutside", void 0);
    __decorate([
        core_1.HostListener('document:click', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], NgXClickOutside.prototype, "controlClick", null);
    NgXClickOutside = __decorate([
        core_1.Directive({
            selector: '[clickOutside]'
        }),
        __metadata("design:paramtypes", [core_1.ElementRef])
    ], NgXClickOutside);
    return NgXClickOutside;
}());
exports.NgXClickOutside = NgXClickOutside;
//# sourceMappingURL=ngx-click-outside.directive.js.map