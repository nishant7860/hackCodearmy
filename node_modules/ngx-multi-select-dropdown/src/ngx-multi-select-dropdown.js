"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
require("./ngx-multi-select-dropdown.css");
var NgXMultiSelectDropdown = (function () {
    function NgXMultiSelectDropdown() {
        this.onSelect = new core_1.EventEmitter();
        this.onUnselect = new core_1.EventEmitter();
    }
    NgXMultiSelectDropdown.prototype.ngOnInit = function () {
        this.setDisplayName();
        this.type = 'Object';
        this.filteredOptions = this.options;
    };
    NgXMultiSelectDropdown.prototype.open = function () {
        this.isOpen = true;
    };
    NgXMultiSelectDropdown.prototype.close = function () {
        this.isOpen = false;
    };
    NgXMultiSelectDropdown.prototype.toggle = function () {
        if (this.isOpen) {
            this.close();
        }
        else {
            this.open();
        }
    };
    // Sets displayName = name if no displayName passed
    NgXMultiSelectDropdown.prototype.setDisplayName = function () {
        if (!this.displayName) {
            this.displayName = 'name';
        }
    };
    NgXMultiSelectDropdown.prototype.isSelectedItemNotEmpty = function () {
        return ((this.selectedItems && this.selectedItems.length) || (this.selectedItem && this.selectedItem.trim() !== ''));
    };
    NgXMultiSelectDropdown.prototype.isSelected = function (option) {
        if (this.selectedItems && this.selectedItems.length > 0) {
            return this.selectedItems.indexOf(option) > -1;
        }
        return false;
    };
    NgXMultiSelectDropdown.prototype.select = function (option) {
        if (!this.selectedItems) {
            this.selectedItems = [];
        }
        this.selectedItems.push(option);
        console.log('selectedItems', this.selectedItems);
        this.onSelect.emit();
    };
    NgXMultiSelectDropdown.prototype.unSelect = function (option) {
        this.selectedItems.splice(this.selectedItems.indexOf(option), 1);
        this.onUnselect.emit();
    };
    NgXMultiSelectDropdown.prototype.toggleSelection = function ($event, option) {
        if ($event.target.checked) {
            this.select(option);
        }
        else {
            this.unSelect(option);
        }
    };
    NgXMultiSelectDropdown.prototype.search = function () {
        this.filteredOptions = [];
        this.filteredOptions = this.filterItemList(this.searchText, this.options);
    };
    NgXMultiSelectDropdown.prototype.filterItemList = function (query, list) {
        var filtered = [];
        if (list) {
            for (var i = 0; i < list.length; i++) {
                var item = list[i];
                if (this.type = 'Object') {
                    if (item.name.toLowerCase().indexOf(query.toLowerCase()) === 0) {
                        filtered.push(item);
                    }
                }
                else {
                    if (item.toLowerCase().indexOf(query.toLowerCase()) === 0) {
                        filtered.push(item);
                    }
                }
            }
        }
        return filtered;
    };
    NgXMultiSelectDropdown.prototype.clearSearch = function () {
        this.searchText = '';
        this.filteredOptions = this.options;
    };
    // For Single Selection 
    NgXMultiSelectDropdown.prototype.selectAndToggleDropdown = function (option) {
        this.toggle();
        this.selectedItem = option;
    };
    return NgXMultiSelectDropdown;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], NgXMultiSelectDropdown.prototype, "options", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], NgXMultiSelectDropdown.prototype, "selectedItems", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], NgXMultiSelectDropdown.prototype, "selectedItem", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], NgXMultiSelectDropdown.prototype, "enableSearch", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], NgXMultiSelectDropdown.prototype, "singleSelection", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], NgXMultiSelectDropdown.prototype, "type", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], NgXMultiSelectDropdown.prototype, "displayName", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], NgXMultiSelectDropdown.prototype, "onSelect", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], NgXMultiSelectDropdown.prototype, "onUnselect", void 0);
NgXMultiSelectDropdown = __decorate([
    core_1.Component({
        selector: 'multi-select-dropdown',
        // templateUrl: './ngx-multi-select-dropdown.html'
        template: "<div clickOutside (clickOutside)=\"close()\" class=\"multi-select-dropdown\">\n    <div class=\"dropdown-toggle-section\" (click)=\"toggle()\">\n        <div class=\"dropdown-toggle-section-content\">\n            <div *ngIf=\"singleSelection && selectedItem\">\n                <div *ngIf=\"type == 'Object'\">\n                    {{selectedItem[displayName]}}\n                </div>\n                <div [hidden]=\"type == 'Object'\">\n                    <label>{{selectedItem}}</label>\n                </div>\n            </div>\n            <div *ngIf=\"!singleSelection && selectedItems && selectedItems.length > 0\">\n                <div class=\"selected-items-count\">{{selectedItems.length}} &nbsp;Selected</div>\n            </div>\n            <div *ngIf=\"!isSelectedItemNotEmpty()\">Select</div>\n        </div>\n        <div class=\"dropdown-toggle-section-icon\">\n            <icon class=\"dropdown-arrow\" [symbol]=\"'chevron-down'\" [circleBorder]=\"false\" [size]=\"'lg'\"></icon>\n        </div>\n    </div>\n    <div *ngIf=\"isOpen\" class=\"dropdown-menu-section\">\n        <div *ngIf=\"enableSearch\" class=\"dropdown-menu-search-section\">\n            <input class=\"option-search-bar\" \n                   type=\"text\" \n                   [(ngModel)]=\"searchText\" \n                   placeholder=\"Search...\" \n                   (change)=\"search()\"/>\n            <div class=\"clear-search-btn\" \n                 (click)=\"clearSearch()\">\n                <i class=\"fa fa-close\"></i>\n            </div>\n        </div>\n        <div class=\"dropdown-menu-list-section\">\n            <div *ngIf=\"filteredOptions && filteredOptions.length > 0\">\n                <div *ngFor=\"let option of filteredOptions\">\n                    <div class=\"dropdown-menu-item\" (click)=\"singleSelection? selectAndToggleDropdown(option): undefined\">\n                        <input *ngIf=\"!singleSelection\" \n                               type=\"checkbox\" \n                               [checked]=\"isSelected(option)\" \n                               (change)=\"toggleSelection($event, option)\" />\n                        <div class=\"dropdown-menu-item-name\" *ngIf=\"type == 'Object'\" >\n                            <label>{{option[displayName]}}</label>\n                        </div>\n                        <div class=\"dropdown-menu-item-name\" [hidden]=\"type == 'Object'\">\n                            <label>{{option}}</label>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div *ngIf=\"filteredOptions.length == 0\">\n                No Result found\n            </div>\n        </div>\n    </div>\n</div>",
        styles: [".dropdown-toggle-section {\n    border: 1px solid rgb(199, 199, 199);\n    cursor: pointer;\n    min-height: 25px;\n    padding: 3px;\n    padding-left: 5px;\n}\n\n.dropdown-menu-section {\n    border: 1px solid rgb(199, 199, 199);\n    margin-top: 2px;\n    cursor: pointer;\n    -webkit-background-clip: padding-box;\n    background-clip: padding-box;\n    -webkit-box-shadow: 0 6px 12px rgba(0, 0, 0, .175);\n    box-shadow: 0 6px 12px rgba(0, 0, 0, .175);\n}\n\n.dropdown-toggle-section-content {\n    display: inline-block;\n    font-weight: bold;\n}\n\n.dropdown-toggle-section-icon {\n    display: inline-block;\n    float: right;\n}\n\n.dropdown-menu-item {\n    margin-bottom: 5px;\n}\n\n.dropdown-menu-search-section {\n    padding: 10px;\n    border-bottom: 1px solid rgb(199, 199, 199);\n}\n.dropdown-menu-item input {\n    display: inline-block;\n    float: left;\n}\n.dropdown-menu-item-name {\n    display: inline-block;\n    margin-left: 6px;\n    margin-top: 7px;\n}\n.option-search-bar {\n    width: 98%;\n    padding: 2px;\n}\n\n.dropdown-menu-list-section {\n    padding: 10px;\n}\n\n.clear-search-btn {\n    border: 1px solid rgb(199, 199, 199);\n    background: rgb(199, 199, 199);\n    display: inline-block;\n    width: 22px;\n    height: 23px;\n    text-align: center;\n    padding-top: 2px;\n    float: right;\n}"]
    }),
    __metadata("design:paramtypes", [])
], NgXMultiSelectDropdown);
exports.NgXMultiSelectDropdown = NgXMultiSelectDropdown;
//# sourceMappingURL=ngx-multi-select-dropdown.js.map