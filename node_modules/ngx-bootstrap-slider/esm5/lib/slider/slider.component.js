/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ViewChild, Input, Output, EventEmitter } from '@angular/core';
var SliderComponent = /** @class */ (function () {
    function SliderComponent() {
        this.initialOptions = {};
        this.valueChange = new EventEmitter();
        // The following events are emitted
        this.slide = new EventEmitter();
        this.slideStart = new EventEmitter();
        this.slideStop = new EventEmitter();
        this.change = new EventEmitter();
    }
    Object.defineProperty(SliderComponent.prototype, "style", {
        // This property is not applied to the underlying slider element
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.slider) {
                this.slider.getElement().setAttribute('style', value);
            }
            else {
                this.initialStyle = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "value", {
        // Handle the value (two-way)
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.slider) {
                this.slider.setValue(value);
            }
            else {
                this.initialOptions.value = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "min", {
        // The following properties are applied to the underlying slider element
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('min', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "max", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('max', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "step", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('step', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "precision", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('precision', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "orientation", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('orientation', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "range", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('range', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "selection", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('selection', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "tooltip", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('tooltip', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "tooltipSplit", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('tooltip_split', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "tooltipPosition", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('tooltipPosition', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "handle", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('handle', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "reversed", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('reversed', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "rtl", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('rtl', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "enabled", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('enabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "naturalArrowKeys", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('natural_arrow_keys', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "ticks", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('ticks', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "ticksPositions", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('ticks_positions', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "ticksLabels", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('ticks_labels', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "ticksSnapBounds", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('ticks_snap_bounds', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "ticksTooltip", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('ticks_tooltip', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "scale", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('scale', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "labelledBy", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('labelledby', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "rangeHighlights", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('rangeHighlights', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "formatter", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeAttribute('formatter', value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SliderComponent.prototype.addChangeListeners = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.slider.on('slide', function (value) {
            _this.slide.emit(value);
        });
        this.slider.on('slideStart', function (value) {
            _this.slideStart.emit(value);
        });
        this.slider.on('slideStop', function (value) {
            _this.slideStop.emit(value);
        });
        this.slider.on('change', function (event) {
            _this.change.emit(event);
            _this.valueChange.emit(event.newValue);
        });
    };
    /**
     * @return {?}
     */
    SliderComponent.prototype.prepareSlider = /**
     * @return {?}
     */
    function () {
        // We need to add the change listeners again after each refresh
        this.addChangeListeners();
        // Add the styling to the element
        this.slider.getElement().setAttribute('style', this.initialStyle);
    };
    /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    SliderComponent.prototype.changeAttribute = /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (name, value) {
        if (this.slider) {
            this.slider.setAttribute(name, value);
            this.slider.refresh();
            this.prepareSlider();
        }
        else {
            this.initialOptions[name] = value;
        }
    };
    /**
     * @return {?}
     */
    SliderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // Don't set the value over the initial options, because it will alway
        // be reset. This option seems to be a little buggy.
        var /** @type {?} */ value = undefined;
        if (this.initialOptions.value) {
            value = this.initialOptions.value;
            delete this.initialOptions['value'];
        }
        this.slider = new Slider(this.sliderElement.nativeElement, this.initialOptions);
        if (value) {
            this.slider.setValue(value);
        }
        this.prepareSlider();
    };
    SliderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mv-slider',
                    template: "<input #slider>",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    SliderComponent.ctorParameters = function () { return []; };
    SliderComponent.propDecorators = {
        sliderElement: [{ type: ViewChild, args: ['slider',] }],
        style: [{ type: Input }],
        value: [{ type: Input }],
        valueChange: [{ type: Output }],
        min: [{ type: Input }],
        max: [{ type: Input }],
        step: [{ type: Input }],
        precision: [{ type: Input }],
        orientation: [{ type: Input }],
        range: [{ type: Input }],
        selection: [{ type: Input }],
        tooltip: [{ type: Input }],
        tooltipSplit: [{ type: Input }],
        tooltipPosition: [{ type: Input }],
        handle: [{ type: Input }],
        reversed: [{ type: Input }],
        rtl: [{ type: Input }],
        enabled: [{ type: Input }],
        naturalArrowKeys: [{ type: Input }],
        ticks: [{ type: Input }],
        ticksPositions: [{ type: Input }],
        ticksLabels: [{ type: Input }],
        ticksSnapBounds: [{ type: Input }],
        ticksTooltip: [{ type: Input }],
        scale: [{ type: Input }],
        labelledBy: [{ type: Input }],
        rangeHighlights: [{ type: Input }],
        formatter: [{ type: Input }],
        slide: [{ type: Output }],
        slideStart: [{ type: Output }],
        slideStop: [{ type: Output }],
        change: [{ type: Output }]
    };
    return SliderComponent;
}());
export { SliderComponent };
function SliderComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    SliderComponent.prototype.sliderElement;
    /** @type {?} */
    SliderComponent.prototype.slider;
    /** @type {?} */
    SliderComponent.prototype.initialOptions;
    /** @type {?} */
    SliderComponent.prototype.initialStyle;
    /** @type {?} */
    SliderComponent.prototype.valueChange;
    /** @type {?} */
    SliderComponent.prototype.slide;
    /** @type {?} */
    SliderComponent.prototype.slideStart;
    /** @type {?} */
    SliderComponent.prototype.slideStop;
    /** @type {?} */
    SliderComponent.prototype.change;
}

//# sourceMappingURL=data:application/json;base64,