import { Injectable, NgModule, Component, ViewChild, Input, Output, EventEmitter, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxBootstrapSliderService {
    constructor() { }
}
NgxBootstrapSliderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
NgxBootstrapSliderService.ctorParameters = () => [];
/** @nocollapse */ NgxBootstrapSliderService.ngInjectableDef = defineInjectable({ factory: function NgxBootstrapSliderService_Factory() { return new NgxBootstrapSliderService(); }, token: NgxBootstrapSliderService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxBootstrapSliderComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
NgxBootstrapSliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'mv-ngx-bootstrap-slider',
                template: `
    <p>
      ngx-bootstrap-slider works!
    </p>
  `,
                styles: []
            },] },
];
/** @nocollapse */
NgxBootstrapSliderComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SliderComponent {
    constructor() {
        this.initialOptions = {};
        this.valueChange = new EventEmitter();
        // The following events are emitted
        this.slide = new EventEmitter();
        this.slideStart = new EventEmitter();
        this.slideStop = new EventEmitter();
        this.change = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set style(value) {
        if (this.slider) {
            this.slider.getElement().setAttribute('style', value);
        }
        else {
            this.initialStyle = value;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        if (this.slider) {
            this.slider.setValue(value);
        }
        else {
            this.initialOptions.value = value;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set min(value) {
        this.changeAttribute('min', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set max(value) {
        this.changeAttribute('max', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set step(value) {
        this.changeAttribute('step', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set precision(value) {
        this.changeAttribute('precision', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set orientation(value) {
        this.changeAttribute('orientation', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set range(value) {
        this.changeAttribute('range', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selection(value) {
        this.changeAttribute('selection', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set tooltip(value) {
        this.changeAttribute('tooltip', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set tooltipSplit(value) {
        this.changeAttribute('tooltip_split', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set tooltipPosition(value) {
        this.changeAttribute('tooltipPosition', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set handle(value) {
        this.changeAttribute('handle', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set reversed(value) {
        this.changeAttribute('reversed', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set rtl(value) {
        this.changeAttribute('rtl', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set enabled(value) {
        this.changeAttribute('enabled', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set naturalArrowKeys(value) {
        this.changeAttribute('natural_arrow_keys', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set ticks(value) {
        this.changeAttribute('ticks', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set ticksPositions(value) {
        this.changeAttribute('ticks_positions', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set ticksLabels(value) {
        this.changeAttribute('ticks_labels', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set ticksSnapBounds(value) {
        this.changeAttribute('ticks_snap_bounds', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set ticksTooltip(value) {
        this.changeAttribute('ticks_tooltip', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set scale(value) {
        this.changeAttribute('scale', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set labelledBy(value) {
        this.changeAttribute('labelledby', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set rangeHighlights(value) {
        this.changeAttribute('rangeHighlights', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set formatter(value) {
        this.changeAttribute('formatter', value);
    }
    /**
     * @return {?}
     */
    addChangeListeners() {
        this.slider.on('slide', (value) => {
            this.slide.emit(value);
        });
        this.slider.on('slideStart', (value) => {
            this.slideStart.emit(value);
        });
        this.slider.on('slideStop', (value) => {
            this.slideStop.emit(value);
        });
        this.slider.on('change', (event) => {
            this.change.emit(event);
            this.valueChange.emit(event.newValue);
        });
    }
    /**
     * @return {?}
     */
    prepareSlider() {
        // We need to add the change listeners again after each refresh
        this.addChangeListeners();
        // Add the styling to the element
        this.slider.getElement().setAttribute('style', this.initialStyle);
    }
    /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    changeAttribute(name, value) {
        if (this.slider) {
            this.slider.setAttribute(name, value);
            this.slider.refresh();
            this.prepareSlider();
        }
        else {
            this.initialOptions[name] = value;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // Don't set the value over the initial options, because it will alway
        // be reset. This option seems to be a little buggy.
        let /** @type {?} */ value = undefined;
        if (this.initialOptions.value) {
            value = this.initialOptions.value;
            delete this.initialOptions['value'];
        }
        this.slider = new Slider(this.sliderElement.nativeElement, this.initialOptions);
        if (value) {
            this.slider.setValue(value);
        }
        this.prepareSlider();
    }
}
SliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'mv-slider',
                template: `<input #slider>`,
                styles: [``]
            },] },
];
/** @nocollapse */
SliderComponent.ctorParameters = () => [];
SliderComponent.propDecorators = {
    sliderElement: [{ type: ViewChild, args: ['slider',] }],
    style: [{ type: Input }],
    value: [{ type: Input }],
    valueChange: [{ type: Output }],
    min: [{ type: Input }],
    max: [{ type: Input }],
    step: [{ type: Input }],
    precision: [{ type: Input }],
    orientation: [{ type: Input }],
    range: [{ type: Input }],
    selection: [{ type: Input }],
    tooltip: [{ type: Input }],
    tooltipSplit: [{ type: Input }],
    tooltipPosition: [{ type: Input }],
    handle: [{ type: Input }],
    reversed: [{ type: Input }],
    rtl: [{ type: Input }],
    enabled: [{ type: Input }],
    naturalArrowKeys: [{ type: Input }],
    ticks: [{ type: Input }],
    ticksPositions: [{ type: Input }],
    ticksLabels: [{ type: Input }],
    ticksSnapBounds: [{ type: Input }],
    ticksTooltip: [{ type: Input }],
    scale: [{ type: Input }],
    labelledBy: [{ type: Input }],
    rangeHighlights: [{ type: Input }],
    formatter: [{ type: Input }],
    slide: [{ type: Output }],
    slideStart: [{ type: Output }],
    slideStop: [{ type: Output }],
    change: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxBootstrapSliderModule {
}
NgxBootstrapSliderModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [NgxBootstrapSliderComponent, SliderComponent],
                exports: [
                    NgxBootstrapSliderComponent,
                    SliderComponent
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { NgxBootstrapSliderService, NgxBootstrapSliderComponent, NgxBootstrapSliderModule, SliderComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,